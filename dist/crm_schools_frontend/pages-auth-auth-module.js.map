{"version":3,"sources":["webpack:///./src/app/pages/auth/auth-routing.module.ts","webpack:///./src/app/pages/auth/auth-wrapper/auth-wrapper.component.html","webpack:///./src/app/pages/auth/auth-wrapper/auth-wrapper.component.scss","webpack:///./src/app/pages/auth/auth-wrapper/auth-wrapper.component.ts","webpack:///./src/app/pages/auth/auth.module.ts","webpack:///./src/app/pages/auth/login/login.component.html","webpack:///./src/app/pages/auth/login/login.component.scss","webpack:///./src/app/pages/auth/login/login.component.ts","webpack:///./src/app/pages/auth/register/register.component.html","webpack:///./src/app/pages/auth/register/register.component.scss","webpack:///./src/app/pages/auth/register/register.component.ts","webpack:///./src/app/services/account/account.service.ts","webpack:///./src/app/services/school/school.service.ts"],"names":[],"mappings":"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","file":"pages-auth-auth-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {LoginComponent} from './login/login.component';\nimport {RegisterComponent} from './register/register.component';\nimport {AuthWrapperComponent} from './auth-wrapper/auth-wrapper.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthWrapperComponent,\n    children: [\n      {\n        path: 'login', component: LoginComponent,\n      },\n      {\n        path: 'register', component: RegisterComponent,\n      },\n    ]\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ],\n  declarations: []\n})\nexport class AuthRoutingModule { }\n","module.exports = \"<div class=\\\"auth-wrapper\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\"","module.exports = \".auth-wrapper {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n  background: url('loginwrapper.svg') no-repeat center center/cover; }\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth-wrapper',\n  templateUrl: './auth-wrapper.component.html',\n  styleUrls: ['./auth-wrapper.component.scss']\n})\nexport class AuthWrapperComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {NgModule, OnDestroy, OnInit} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport {AuthRoutingModule} from './auth-routing.module';\nimport { RegisterComponent } from './register/register.component';\nimport {SharedModule} from '@sharedModules/shared-module/shared-module.module';\nimport { AuthWrapperComponent } from './auth-wrapper/auth-wrapper.component';\nimport {AuthService} from '@services/auth/auth.service';\nimport {AccountService} from '@services/account/account.service';\n\n// @ngrx\nimport { Store } from '@ngrx/store';\nimport * as SpinnerReducer from '@store/spinner/reducers';\nimport {StartSpinner, StopSpinner} from '@store/spinner/actions';\nimport {AuthFacade} from '@app/facades/auth/authFacade';\nimport {SchoolService} from '@services/school/school.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    AuthRoutingModule\n  ],\n  declarations: [LoginComponent, RegisterComponent, AuthWrapperComponent],\n  providers: [AuthService, SchoolService, AccountService]\n})\nexport class AuthModule implements OnDestroy, OnInit {\n\n  constructor(\n    private authFacade: AuthFacade,\n    private spinnerStore: Store<SpinnerReducer.SpinnerState>\n  ) {\n    this.authFacade.checkAuthStatusAndRedirect();\n  }\n\n  ngOnInit() {\n    this.spinnerStore.dispatch(new StopSpinner());\n  }\n\n  ngOnDestroy() {\n    this.spinnerStore.dispatch(new StartSpinner());\n  }\n}\n","module.exports = \"<mat-card>\\n  <mat-card-header>\\n    <mat-card-title>Login</mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <form [formGroup]=\\\"signinForm\\\" (ngSubmit)=\\\"login()\\\">\\n      <table cellspacing=\\\"0\\\">\\n        <tr>\\n          <td>\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Email\\\"\\n                     name=\\\"email\\\"\\n                     formControlName=\\\"email\\\"\\n              >\\n            </mat-form-field>\\n            <div\\n              *ngIf=\\\"!signinForm.get('email').valid && signinForm.get('email').touched\\\"\\n              class=\\\"help-block\\\">\\n              <span *ngIf=\\\"signinForm.get('email').errors['emailIsForbidden']\\\">This email is invalid!</span>\\n              <span *ngIf=\\\"signinForm.get('email').errors['required']\\\">This field is required!</span>\\n            </div>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>\\n            <mat-form-field>\\n            <input matInput placeholder=\\\"Password\\\"\\n                   formControlName=\\\"password\\\"\\n                   type=\\\"password\\\"\\n                   name=\\\"password\\\" required>\\n          </mat-form-field>\\n            <div\\n              *ngIf=\\\"!signinForm.get('password').valid && signinForm.get('password').touched\\\"\\n              class=\\\"help-block\\\">\\n              <span *ngIf=\\\"signinForm.get('password').errors['required']\\\">This field is required!</span>\\n            </div>\\n          </td>\\n        </tr>\\n      </table>\\n      <mat-card-actions>\\n        <button mat-raised-button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"!signinForm.valid && signinForm.touched || !signinForm.touched\\n    \\\">Login</button>\\n        <a mat-button [routerLink]=\\\"['/auth/register']\\\">Register</a>\\n      </mat-card-actions>\\n    </form>\\n  </mat-card-content>\\n</mat-card>\\n\"","module.exports = \"app-login {\\n  height: 100%; }\\n\"","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AuthService} from '@services/auth/auth.service';\n\n// @ngrx\nimport { Store } from '@ngrx/store';\n\n// rxjs\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/takeWhile';\n\n// actions\nimport {AuthenticateAction, AuthenticatedSuccessAction} from '@store/auth/actions';\nimport * as AuthenticateReducer from '@store/auth/reducers';\n\n// reducers\nimport {AccountService} from '@services/account/account.service';\nimport {AuthenticateResponseInterface} from '@app/interfaces/authenticateResponse.interface';\nimport * as SpinnerReducer from '@store/spinner/reducers';\nimport {StopSpinner} from '@store/spinner/actions';\nimport {User} from '@models/user';\nimport {AccountServiceResponseInterface} from '@app/interfaces/accountServiceResponse.interface';\nimport {AuthFacade} from '@app/facades/auth/authFacade';\nimport {PermissionFacade} from '@facades/permission/permissionFacade';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  signinForm: FormGroup;\n\n  /**\n   * Component state.\n   * @type {boolean}\n   */\n  private alive = true;\n  constructor(\n    private router: Router,\n    private authFacade: AuthFacade,\n    private authService: AuthService,\n    private accountService: AccountService,\n    private store: Store<AuthenticateReducer.AuthState>,\n    private spinnerStore: Store<SpinnerReducer.SpinnerState>\n\n  ) {\n  }\n\n  ngOnInit() {\n    this.signinForm = new FormGroup({\n      'password': new FormControl(null, [Validators.required]),\n      'email': new FormControl(null, [Validators.required, Validators.email])\n    });\n  }\n\n  /**\n   *  Lifecycle hook that is called when a directive, pipe or service is destroyed.\n   * @method ngOnDestroy\n   */\n  public ngOnDestroy() {\n    this.alive = false;\n  }\n\n  login(): void {\n    this.authService.login({email: this.signinForm.value.email, password: this.signinForm.value.password})\n      .subscribe(\n        (resp: AuthenticateResponseInterface) => {\n          if (resp.data.token) {\n            this.store.dispatch(new AuthenticateAction(resp.data.token));\n            this.accountService.getAccount().subscribe(\n              (response: AccountServiceResponseInterface) => {\n                const permissions = PermissionFacade.groupByModelName(response.data.permissions);\n                const user = new User(response.data);\n                if (permissions) {\n                  user.permissions = permissions;\n                }\n                  this.store.dispatch(new AuthenticatedSuccessAction({authenticated: true, user: user}));\n                  this.authFacade.checkAuthStatusAndRedirect();\n              },\n              error => {\n                console.log(error);\n              }\n            );\n          }\n          this.spinnerStore.dispatch(new StopSpinner());\n        });\n  }\n\n}\n","module.exports = \"<mat-card>\\n  <mat-card-header>\\n    <mat-card-title>Register</mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <form [formGroup]=\\\"signupForm\\\" (ngSubmit)=\\\"register()\\\">\\n      <table cellspacing=\\\"0\\\">\\n        <tr>\\n          <td>\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Name\\\"\\n                     name=\\\"email\\\"\\n                     formControlName=\\\"name\\\"\\n              >\\n            </mat-form-field>\\n            <div\\n              *ngIf=\\\"!signupForm.get('name').valid && signupForm.get('name').touched\\\"\\n              class=\\\"help-block\\\">\\n              <span *ngIf=\\\"signupForm.get('name').errors['required']\\\">This field is required!</span>\\n            </div>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Email\\\"\\n                     name=\\\"email\\\"\\n                     formControlName=\\\"email\\\"\\n              >\\n            </mat-form-field>\\n            <div\\n              *ngIf=\\\"!signupForm.get('email').valid && signupForm.get('email').touched\\\"\\n              class=\\\"help-block\\\">\\n              <span *ngIf=\\\"signupForm.get('email').errors['email']\\\">This email is invalid!</span>\\n              <span *ngIf=\\\"signupForm.get('email').errors['required']\\\">This field is required!</span>\\n            </div>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Password\\\"\\n                     formControlName=\\\"password\\\"\\n                     type=\\\"password\\\"\\n                     name=\\\"password\\\" required>\\n            </mat-form-field>\\n            <div\\n              *ngIf=\\\"!signupForm.get('password').valid && signupForm.get('password').touched\\\"\\n              class=\\\"help-block\\\">\\n              <span *ngIf=\\\"signupForm.get('password').errors['required']\\\">This field is required!</span>\\n            </div>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Confirm password\\\"\\n                     formControlName=\\\"confirm_password\\\"\\n                     type=\\\"password\\\"\\n                     name=\\\"confirm_password\\\" required>\\n            </mat-form-field>\\n            <div\\n              *ngIf=\\\"!signupForm.get('confirm_password').valid && signupForm.get('confirm_password').touched\\\"\\n              class=\\\"help-block\\\">\\n              <span *ngIf=\\\"signupForm.get('confirm_password').errors['confirmedPassword']\\\">Password not confirmed!</span>\\n              <span *ngIf=\\\"signupForm.get('confirm_password').errors['required']\\\">This field is required!</span>\\n            </div>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td class=\\\"float_right\\\">\\n            <mat-checkbox #checkbox (change)=\\\"onClickedCheckBox(checkbox)\\\" class=\\\"mat-primary\\\">Create school</mat-checkbox>\\n          </td>\\n        </tr>\\n        <div *ngIf=\\\"addASchool === true\\\">\\n          <h2>Create Gym</h2>\\n          <tr>\\n            <td>\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Gym Name\\\"\\n                       name=\\\"gym_name\\\"\\n                       formControlName=\\\"gym_name\\\"\\n                >\\n              </mat-form-field>\\n              <div\\n                *ngIf=\\\"!signupForm.get('gym_name').valid && signupForm.get('gym_name').touched\\\"\\n                class=\\\"help-block\\\">\\n                <span *ngIf=\\\"signupForm.get('gym_name').errors['required_custom']\\\">This field is required!</span>\\n              </div>\\n            </td>\\n          </tr>\\n          <tr>\\n            <td>\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Gym Description\\\"\\n                       name=\\\"gym_description\\\"\\n                       formControlName=\\\"gym_description\\\"\\n                >\\n              </mat-form-field>\\n            </td>\\n          </tr>\\n          <tr>\\n            <td>\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Gym Address\\\"\\n                       name=\\\"gym_address\\\"\\n                       formControlName=\\\"gym_address\\\"\\n                >\\n              </mat-form-field>\\n            </td>\\n          </tr>\\n        </div>\\n      </table>\\n      <mat-card-actions>\\n        <button mat-raised-button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"!signupForm.valid && signupForm.touched || !signupForm.touched\\n    \\\">Register</button>\\n      </mat-card-actions>\\n    </form>\\n  </mat-card-content>\\n</mat-card>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AuthService} from '@services/auth/auth.service';\nimport * as SpinnerReducer from '@store/spinner/reducers';\nimport {Store} from '@ngrx/store';\nimport {Router} from '@angular/router';\nimport {StartSpinner, StopSpinner} from '@store/spinner/actions';\nimport {SchoolService} from '@services/school/school.service';\nimport {AuthFacade} from '@facades/auth/authFacade';\nimport {AuthenticateAction, SignOut} from '@store/auth/actions';\nimport * as AuthReducer from '@store/auth/reducers';\nimport {AuthenticateResponseInterface} from '@interfaces/authenticateResponse.interface';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  signupForm: FormGroup;\n  addASchool = false;\n\n  constructor(\n    private router: Router,\n    private authFacade: AuthFacade,\n    private authService: AuthService,\n    private schoolService: SchoolService,\n    private authStore: Store<AuthReducer.AuthState>,\n  private spinnerStore: Store<SpinnerReducer.SpinnerState>\n  ) { }\n\n  ngOnInit() {\n    this.signupForm = new FormGroup({\n      'name': new FormControl(null, [Validators.required]),\n      'email': new FormControl(null, [Validators.required, Validators.email]),\n      'password': new FormControl(null, [Validators.required]),\n      'confirm_password': new FormControl(null, [Validators.required, this.confirmedPassword.bind(this)]),\n      'gym_name': new FormControl(null, [this.requiredCustom.bind(this)]),\n      'gym_description': new FormControl(null),\n      'gym_address': new FormControl(null),\n    });\n  }\n\n  confirmedPassword(control: FormControl): {[s: string]: boolean} {\n    if (this.signupForm && this.signupForm.get('password').value !== this.signupForm.get('confirm_password').value) {\n      return {'confirmedPassword': true};\n    } else {\n      return null;\n    }\n  }\n\n  requiredCustom(control: FormControl): {[s: string]: boolean} {\n    if (control.value && control.value.length !== 0) {\n      control.markAsTouched();\n    }\n    if (this.addASchool && control.touched && (!control.value || control.value.length === 0)) {\n      return {'required_custom': true};\n    } else {\n      return null;\n    }\n  }\n\n  onClickedCheckBox(val) {\n    if (!val.checked) {\n      this.signupForm.get('gym_name').reset();\n    }\n    this.addASchool = !this.addASchool\n  }\n\n  register() {\n    console.log(this.signupForm);\n    this.spinnerStore.dispatch(new StartSpinner());\n    this.authService.register({name: this.signupForm.get('name').value,\n                              email: this.signupForm.get('email').value,\n                              password: this.signupForm.get('password').value,\n                              password_confirmation: this.signupForm.get('confirm_password').value})\n      .subscribe(\n        (resp: AuthenticateResponseInterface) => {\n          const schoolName = this.signupForm.get('gym_name').value;\n          if(schoolName && schoolName.length > 0) {\n            this.authStore.dispatch(new AuthenticateAction(resp.data.token));\n            this.schoolService.create({\n              name: this.signupForm.get('gym_name').value,\n              description: this.signupForm.get('gym_description').value,\n              address: this.signupForm.get('gym_address').value\n            }).subscribe(\n              resp => console.log(resp)\n            )\n          }\n          this.authStore.dispatch(new SignOut(this.authFacade));\n          this.spinnerStore.dispatch(new StopSpinner());\n          this.router.navigate(['/auth/login']);\n        }\n      )\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class AccountService {\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  getAccount() {\n    return  this.httpClient.get('account');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {CreateSchool} from '@interfaces/requests/create-school';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class SchoolService {\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  create(body: CreateSchool) {\n    return this.httpClient.post('school', body)\n  }\n}\n"],"sourceRoot":""}